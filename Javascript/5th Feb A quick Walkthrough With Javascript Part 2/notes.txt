Call Stack
-----------
Callstack keep the track of the function call and as well as variables which are 
being defined in the program. 

It follows the LIFO Principle.

We use call stack to get to know that what function is being getting executed right now. 
Basically a javascript engine uses the callstack to manage the execution context.

The javascript engine is creating the global execution context whenever we runs the script and pushed
at the top of the stack.

and if a function is being called then a funtion execution context is getting created and pushed it
into the callstack and when the function execution gets over it pooped out of the task .

Program for Callstack
---------------------
function sum(){
    let a = 10 
    let b = 20 
    sum = a+b
    return sum
}
console.log(sum())

function sub(){

    let a =20
    let b = 30 
    sub = (a-b)
    console.log(sub)
}
sub()

function product(){
    let num1 = 10 
    let num2 = 20
    pro = num1*num2
    console.log(pro)
}
product()

so first of all global execution context is created and pushed into the call stack. 
after that the sum() function is getting called and pushed into the stack as soon as the
execution got over it popped out of the stack. 

and then sub() function will be pushed into the stack the same thing will happen with sub()
function as well it will also gets executed and as soon as the execution got over it 
popped out of the stack

and now the same thing will happen with the product() function as well.

Hoisting: 
--------
Hoisting is a phenomena in javascript by which we can acess something without even before initializing it.

so even before the code starts executing the memory is allocated to 
each and every variables and functions

due to hoisting the variable is allocated some memory space and assigned a special value called undefined and if there is any function during phase one then the whole function code is saved into it.

so everything happen during phase one.

when the code execution phase will start at that time the actual value of of the variable will get attatched to it in the place of undefined

so when some one will ask you what is hoisting then instead of telling them that moving the variable to the top etc etc we can explain them that due to hositing only we can acess those variable withouteven declaration or without even executing single line of code and the most intresting part is that we will never get 
any error for that.


Closures: 
---------
Function along with its lexical environment forms a closure But what is lexical environment 
whenever a execution context is created an lexical environment is also created.

Lexical Environment is the local memory along with the lexical environment of its parent.
or in the simple words.

closure is something which is having access to its outer environment.
inner function having the access to its outer function or whatever we have defined
inside the outer function, and as well as whetever we have defined in the global.



function displayName(){
    let username = "deepak"
    function dispplayDetails(){
        console.log(username)
    }
    dispplayDetails()
}
displayName()

lexical mean where that spcecfic variable/function is present inside the code
from this example i can say that dispplayDetails is lexically sitting inside displayName function
and displayName is lexically sitting inside the global scope.


Lexical Enironment: 
-------------------
Lexical Enironment is the local memory along with its parent lexical environment.
lexical mean where it is physically present let get into an example.

function displayDetails(){
    let name = "deepak";
    let surname = "nayak;
    let location = "kolkotta";

    function displayName(){
        console.log(name)
    }
    displayName()
}
displayDetails()

in this example i want to console name  in displayName() function 
so fist of all it will try to search name in the local memory of 
displayName() function i mean inside the displayName(). 

If it is not present then it will try to find out in the lexical environment 
of its parent and lexical mean where it is physically present and displayName() 
function is present inside the displayDetails() function

so displayName() lexical parent is displayDetails().

suppose if it is not present in the displayDetails() then again it will try to find out 
in the lexical environment of displayDetails() which is global 

and in global also if it is not present then it will try to find out in the global 
lexical environment which is null and hence the program will stop now 

so now i have searched all the lexical environment and it is present anywhere 
in this case the program will stop and js engine says that the 'name' is not 
present anywhere so we will get an output of notdefined. 

so this mechanisim of finding out variable from one local memory 
to another from one lexical environment to another in known as 
scope chaining.

Callback
-------
A function which can be passed as a parameter to other function.

function outerFunction(){
    function innerFunction(){
        console.log('This is inner function')
    }
    return innerFunction
}

let result = outerFunction()
result()

in the above example i have created an outer function and inside outer function 
i have created and inner function. 

in line number 151 the outer function is returning the inner function.
so it is clear that a function can return another function.